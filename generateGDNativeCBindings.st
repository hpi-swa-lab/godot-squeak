| apiMethods apiSpec sourceTemplate methodStrings source sourceHeader filename |

Transcript show: 'Reading method specs...'; cr.
apiSpec := (Json readFrom:
  (FileStream readOnlyFileNamed: '/home/leo/Uni/Master/PX/godot-plugin/plugin/godot-headers/gdnative_api.json')) core.

apiMethods := OrderedCollection new.
[apiSpec notNil] whileTrue: [ | apiIdentifier |
  apiIdentifier := 'api_{1}_{2}' format: {apiSpec version major. apiSpec version minor.}.
  apiMethods addAll: (apiSpec api collect: [:method | {apiIdentifier. method}]).
  apiSpec := apiSpec at: 'next' ].

Transcript show: 'Generating source...'; cr.
sourceTemplate := '{1} {2}({3}) \{
  {4}{5}->{2}({6});
\}'.
sourceHeader := '// NOTE: This file was autogenerated. Any modifications to it may be lost.

#include <gdnative_api_struct.gen.h>
#include "apiStructDecl.h"'.

methodStrings := apiMethods collect: [:methodSpec | | method |
  method := methodSpec second.
  sourceTemplate format: {
    method return_type.
    method name.
    (method arguments collect: [:arg | arg first, ' ', arg second]) joinSeparatedBy: ', '.
    method return_type = 'void' ifTrue: [''] ifFalse: ['return '].
    methodSpec first.
    (method arguments collect: [:arg | arg second]) joinSeparatedBy: ', '
  
  }].

source := sourceHeader, String crlfcrlf, (methodStrings joinSeparatedBy: String crlfcrlf).

filename := OSProcess thisOSProcess environmentAt: 'OUTPUT_FILE'.
Transcript show: ('Writing source to {1}...' format: {filename}); cr.
FileStream forceNewFileNamed: filename do: [:stream | stream nextPutAll: source withUnixLineEndings utf8Encoded].

Transcript show: 'Done'; cr.
