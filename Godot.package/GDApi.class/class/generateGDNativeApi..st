as yet unclassified
generateGDNativeApi: aPath

	| apiSpec methods source sourceTemplate types |
	apiSpec := (Json readFrom: (FileStream readOnlyFileNamed: aPath)) core.
	
	methods := OrderedCollection new.
	[apiSpec notNil] whileTrue: [
		methods addAll: apiSpec api.
		apiSpec := apiSpec next].
	
	sourceTemplate := '{1}{2}
	<generated>
	<apicall: {3} {4}({5})>
	^ self externalCallFailed'.

	types := Dictionary withAll: {
		"'godot_bool' -> 'GDBool'."
		'godot_bool' -> 'bool'.
		"'godot_int' -> 'GDInt'."
		'godot_int' -> 'int'.
		"'godot_real' -> 'GDReal'."
		'godot_real' -> 'float'.
		'godot_string' -> 'GDString'.
		'godot_vector2' -> 'GDVector2'.
		'godot_rect2' -> 'GDRect2'.
		'godot_vector3' -> 'GDVector3'.
		'godot_transform2d' -> 'GDTransform2d'.
		'godot_plane' -> 'GDPlane'.
		'godot_quat' -> 'GDQuat'.
		'godot_aabb' -> 'GDAabb'.
		'godot_basis' -> 'GDBasis'.
		'godot_transform' -> 'GDTransform'.
		'godot_color' -> 'GDColor'.
		'godot_node_path' -> 'GDNode_path'.
		'godot_rid' -> 'GDRid'.
		'godot_object' -> 'GDObject'.
		'godot_dictionary' -> 'GDDictionary'.
		'godot_array' -> 'GDArray'.
		'godot_pool_byte_array' -> 'GDPoolByteArray'.
		'godot_pool_int_array' -> 'GDPoolIntArray'.
		'godot_pool_real_array' -> 'GDPoolRealArray'.
		'godot_pool_string_array' -> 'GDPoolStringArray'.
		'godot_pool_vector2_array' -> 'GDPoolVector2Array'.
		'godot_pool_vector3_array' -> 'GDPoolVector3Array'.
		'godot_pool_color_array' -> 'GDPoolColorArray'.
		'godot_variant' -> 'GDVariant'.
		'godot_variant_call_error' -> 'GDVariantCallError'.
		'godot_variant_type' -> 'int'.
	}.
	
	methods do: [:method | | returnType |
		returnType := (method return_type findTokens select: [:token | token ~= 'signed']) joinSeparatedBy: ' '.
		returnType := types at: returnType ifAbsent: [returnType].
		source := sourceTemplate format: {
			((method name subStrings: '_') allButFirst collect: #capitalized) join withFirstCharacterDownshifted.
			method arguments notEmpty
				ifTrue: [': ', ((method arguments collect: #second) joinSeparatedBy: ' with: ')]
				ifFalse: [''].
			returnType.
			method name.
			(method arguments collect: [:arg | | typeComponents |
				typeComponents := arg first findTokens.
				(typeComponents first = 'const' or: typeComponents first = 'signed') ifTrue: [typeComponents removeFirst].
				typeComponents at: 1 put: (types at: typeComponents first ifAbsent: [typeComponents first]).
				(typeComponents anySatisfy: [:component | component = '**'])
					ifTrue: ['void *']
					ifFalse: [typeComponents joinSeparatedBy: ' ']
			]) joinSeparatedBy: ', '.
		}.
	
		GDApi compile: source classified: '*autogenerated - gdnative'] displayingProgress: [:method | method name]